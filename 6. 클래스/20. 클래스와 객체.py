"""
*클래스(class): 함수뿐만 아니라 관련된 변수까지도 한꺼번에 묶어서 관리하고 재사용할 수 있게 해주는 것
"""

"""
*객체(object): 하나의 클래스로부터 나오는 무수한 것들(붕어빵 틀: 클래스, 붕어빵: 객체)

객체 지향 프로그래밍(Object-Oriented Programming, OOP): 객체를 사용하여 데이터를 표현하는 프로그래밍

클래스와 객체를 사용하면 많은 문제들을 더욱 손쉽게 해결 가능
"""

"""
*속성(attribute)과 메소드(method)

속성: 클래스에 포함되는 변수
메소드: 클래스에 포함되는 함수

클래스 멤버(class member): 속성 + 메소드
"""

"""
*클래스 선언하기

class 키위드를 사용하여 클래스를 선언, 내부에서 def 키워드를 사용하여 메소드 선언
"""
class hero:             #클래스 선언
    name = "그린 랜턴"  #속성 선언
    age = 2011
    breed = "DC 유니버스"

    def bark(self):     #메소드 선언
        print(self.name + "이/가 시원하게 망했다.")  #해당 클래스의 name 속성에 접근
print("-------")
'''
self 매개변수(=자바의 this): 객체가 자기 자신을 참조하는데 사용하는 매개변수
                             메소드에서 클래스에 정의된 모든 속성 및 다른 메소드에 접근 가능
                             메소드를 선언할 때 첫번째 매개변수로 반드시 self를 명시
                             메소드를 호출할 때는 self 매개변수에 아무런 인수를 전달할 필요 없음
'''

"""
*인스턴스 생성하기

인스턴스(instance): 클래스를 기반으로 생성된 객체

클래스명에 소괄호(())를 사용하여 인스턴스 생성 가능
생성된 인스턴스에 닷(.)연산자를 사용하면 해당 클래스의 속성이나 메소드 호출 가능

문법:
인스턴스명 = 클래스명()
"""
class hero:  #클래스 선언
    name = "그린 랜턴"
    age = 2011
    breed = "DC 유니버스"

    def bark(self):
        print(self.name + "이/가 시원하게 망했다.")

my_hero = hero()      #my_hero라는 이름을 가지는 hero 클래스의 인스턴스 생성
#my_hero: 객체이면서 인스턴스

print(my_hero.breed)  #인스턴스의 속성 접근
my_hero.bark()        #인스턴스의 메소드 호출
#객체와 인스턴스는 별개의 것이 아닌 객체를 바라보는 관점의 차이
